import unittest


def RLE(texte):
    # si le texte est vide on renvoie une chaine vide
    if not texte:
        return ""

    resultat = []

    # initialise le compteur et le caractère
    compteur = 1
    caractere = texte[0]

    # on parcours le texte a partir du deuxième caractère
    for i in range(1, len(texte)):
        # si le caractère actuel est le même que le précédent et que le compteur est inférieur à 9
        if texte[i] == caractere and compteur < 9:
            compteur += 1
        else:
            # sinon on ajoute le compteur et le caractère au résultat
            resultat.extend([str(compteur), caractere])
            # on remets les variables a jour
            compteur = 1
            caractere = texte[i]

    # on ajoute ce qu'il reste au resultat
    resultat.extend([str(compteur), caractere])

    # on mets la liste sous foeme de chaine et on la renvoie
    return "".join(resultat)


def RLE_rec(chaine, nombre):
    resultat = chaine
    for _ in range(nombre):
        resultat = RLE(resultat)
    return resultat


def unRLE(chaine):
    result = ""
    for i in range(0, len(chaine), 2):
        nombre = int(chaine[i])
        caractere = chaine[i+1]
        result += caractere * nombre
    return result

def unRLE_rec(chaine, nombre):
    resultat = chaine
    for i in range(nombre):
        resultat = unRLE(resultat)
    return resultat


class TestAlgoCorriger(unittest.TestCase):
    def test_RLE(self):
        self.assertEqual("", RLE(""))
        self.assertEqual("1a1b1c", RLE("abc"))
        self.assertEqual("1a2b3c", RLE("abbccc"))
        self.assertEqual("3a1b2a", RLE("aaabaa"))
        self.assertEqual("1a1A1a", RLE("aAa"))
        self.assertEqual("9W4W", RLE("WWWWWWWWWWWWW"))

        # Supplementary tests
        self.assertEqual("1a1b1c1A1B1C1D1E1d1e", RLE("abcABCDEde"))
        self.assertEqual("1a1b9B7B2b1c", RLE("abBBBBBBBBBBBBBBBBbbc"))
        self.assertEqual("2a", RLE("aa"))
        self.assertEqual("111213", RLE("123"))
        self.assertEqual("259n9n2n3z2r1t1r1y261019", RLE("55nnnnnnnnnnnnnnnnnnnnzzzrrtry6609"))

    def test_RLE_recursif(self):
        try:
            self.assertEqual("", RLE_rec("", 1))
            self.assertEqual("", RLE_rec("", 3))

            self.assertEqual("1a1b1c", RLE_rec("abc", 1))
            self.assertEqual("1a2b3c", RLE_rec("abbccc", 1))
            self.assertEqual("3a1b2a", RLE_rec("aaabaa", 1))
            self.assertEqual("1a1A1a", RLE_rec("aAa", 1))

            self.assertEqual("111a111b111c", RLE_rec("abc", 2))
            self.assertEqual("311a311b311c", RLE_rec("abc", 3))

            sae_ite20 = "1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211S1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211A1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211E1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211 1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211A1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211l1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o"
            self.assertEqual(sae_ite20, RLE_rec("SAE Algo", 20))

            sae_ite15 = "311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311221132211221121332211a311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311221132211221121332211z311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311221132211221121332211e311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311221132211221121332211r311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311221132211221121332211t311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311221132211221121332211y"
            self.assertEqual(sae_ite15, RLE_rec("azerty", 15))
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")

    def test_unRLE(self):
        try:
            self.assertEqual("", unRLE(""))
            self.assertEqual("abc", unRLE("1a1b1c"))
            self.assertEqual("abbccc", unRLE("1a2b3c"))
            self.assertEqual("aaabaa", unRLE("3a1b2a"))
            self.assertEqual("aAa", unRLE("1a1A1a"))
            self.assertEqual("WWWWWWWWWWWWW", unRLE("9W4W"))

            # Supplementary tests
            self.assertEqual("aaAAaaBBaa", unRLE("2a2A2a2B2a"))
            self.assertEqual("aAAbbbBBBBccccc", unRLE("1a2A3b4B5c"))
            self.assertEqual("aAAbbbBBBBccccc", unRLE(RLE("aAAbbbBBBBccccc")))
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")

    def test_unRLE_recursif(self):
        try:
            self.assertEqual("", unRLE_rec("", 1))
            self.assertEqual("", unRLE_rec("", 3))

            self.assertEqual("abc", unRLE_rec("1a1b1c", 1))
            self.assertEqual("abbccc", unRLE_rec("1a2b3c", 1))
            self.assertEqual("aaabaa", unRLE_rec("3a1b2a", 1))
            self.assertEqual("aAa", unRLE_rec("1a1A1a", 1))

            self.assertEqual("abc", unRLE_rec("111a111b111c", 2))
            self.assertEqual("abc", unRLE_rec("311a311b311c", 3))

            # Supplementary tests
            self.assertEqual("aaaavrrvr", unRLE_rec("3114311a13211v3112311r13211v13211r", 4))
            self.assertEqual("zzzzERRTTTRZaz", unRLE_rec(
                "1113122114111312211z31131122211E1113122112111312211R11131211121312211T31131122211R31131122211Z31131122211a31131122211z",
                6))
            self.assertEqual("azerty", unRLE_rec(RLE_rec("azerty", 15), 15))
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")


if __name__ == '__main__':
    unittest.main()
